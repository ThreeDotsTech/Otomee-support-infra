AWSTemplateFormatVersion: '2010-09-09'
Description: A stack for deploying containerized applications onto a cluster of EC2
             hosts using Elastic Container Service. This stack runs containers on
             hosts that are in a public VPC subnet.
Parameters:
  DesiredCapacity:
    Type: Number
    Default: '3'
    Description: Number of EC2 instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Default: '6'
    Description: Maximum number of EC2 instances that can be launched in your ECS cluster.
  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
  KeypairName:
    Description: The keypair to use on the EC2 instances
    Type: String
  Email:
    Description: The email to be used by the TSL/SSL certificate process
    Type: String
  CloudflareAPIKEYSSM:
    Description: The name of the SecureString SSM Param where the Cloudflare API key is stored
    Type: String
    Default: cloudflareAPIKEY
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: c4.xlarge
    AllowedValues: [t2.micro, t2.small, t2.medium, t2.large, m3.medium, m3.large,
      m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, c3.large, c3.xlarge,
      c3.2xlarge, c3.4xlarge, c3.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge,
      r3.8xlarge, i2.xlarge, i2.2xlarge, i2.4xlarge, i2.8xlarge]
    ConstraintDescription: Please choose a valid instance type.
Mappings:
  # Hard values for the subnet masks. These masks define
  # the range of internal IP addresses that can be assigned.
  # The VPC can have all IP's from 10.0.0.0 to 10.0.255.255
  # There are two subnets which cover the ranges:
  #
  # 10.0.0.0 - 10.0.0.255
  # 10.0.1.0 - 10.0.1.255
  #
  # If you need more IP addresses (perhaps you have so many
  # instances that you run out) then you can customize these
  # ranges to add more
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PublicTwo:
      CIDR: '10.0.1.0/24'
Resources:
  # VPC in which containers will be networked.
  # It has two public subnets
  # We distribute the subnets across the first two available subnets
  # for the region, for high availability.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']

  #An Elastic IP to bind to the EC2s
  EIP:
    Type: AWS::EC2::EIP
  # Two public subnets, where containers can have public IP addresses
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true

  # Setup networking resources for the public subnets. Containers
  # in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster

  #Create an EFS to persist data
  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: false
      PerformanceMode: generalPurpose
      FileSystemPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - elasticfilesystem:ClientMount
              - elasticfilesystem:ClientRootAccess
              - elasticfilesystem:ClientWrite
            Principal: "*"
      ThroughputMode: bursting


  #Role to access the EFS
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      #RoleName: !Join ['-',[!Ref ClusterName, TaskRole,!Ref AWS::Region]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: EFSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                 - elasticfilesystem:ClientMount
                 - elasticfilesystem:ClientRootAccess                 
                 - elasticfilesystem:ClientWrite
                Resource: "*"

  #Security group to access the EFS
  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable EFS access via port 2049"
      GroupName: "EFS SG"
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref EcsHostSecurityGroup
          IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          Description: "For enabling EFS access"
      SecurityGroupEgress:
        - SourceSecurityGroupId: !Ref EcsHostSecurityGroup
          IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          Description: "For enabling EFS access"
      VpcId: !Ref 'VPC'

  EFSSecurityGroupIngressFromEFS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Enable EFS access via port 2049
      GroupId: !Ref 'EcsHostSecurityGroup' 
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !Ref 'EFSSecurityGroup'
  
  #One Mount target for each subnet
  MountTargetPrivateSubnet1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups: [ !Ref EFSSecurityGroup ]
      SubnetId: !Ref PublicSubnetOne
  MountTargetPrivateSubnet2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups: [ !Ref EFSSecurityGroup ]
      SubnetId: !Ref PublicSubnetTwo

  # One rule, allowing network traffic from other hosts in the security group.
  #
  # Remove any of the following ingress rules that are not needed.
  # If you want to make direct requests to a container using its
  # public IP address you'll need to add a security group rule
  # to allow traffic from all IP addresses.
  EcsHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS hosts that run containers
      VpcId: !Ref 'VPC'
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other hosts in the same security group
      GroupId: !Ref 'EcsHostSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'EcsHostSecurityGroup'
  EcsSecurityGroupIngressIpfs1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress libp2p swarm port
      GroupId: !Ref 'EcsHostSecurityGroup'
      IpProtocol: tcp
      FromPort: 4002
      ToPort: 4002
      CidrIp: "0.0.0.0/0"
  EcsSecurityGroupIngressIpfs2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress libp2p swarm port
      GroupId: !Ref 'EcsHostSecurityGroup'
      IpProtocol: tcp
      FromPort: 4003
      ToPort: 4003
      CidrIp: "0.0.0.0/0"
  EcsSecurityGroupIngressIpfsUiAdmin:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress to Web UI (Admin)
      GroupId: !Ref 'EcsHostSecurityGroup'
      IpProtocol: tcp
      FromPort: 5002
      ToPort: 5002
      CidrIp: "0.0.0.0/0"
  EcsSecurityGroupIngressIpfsUiReadOnly:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress to Gateway (Read Only)
      GroupId: !Ref 'EcsHostSecurityGroup'
      IpProtocol: tcp
      FromPort: 9090
      ToPort: 9090
      CidrIp: "0.0.0.0/0"

  # Autoscaling group. This launches the actual EC2 instances that will register
  # themselves as members of the cluster, and run the docker containers.
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: '1'
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredCapacity'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
  ContainerInstances:
    DependsOn: EFSFileSystem
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref 'ECSAMI'
      SecurityGroups: [!Ref 'EcsHostSecurityGroup']
      InstanceType: !Ref 'InstanceType'
      KeyName: !Ref 'KeypairName'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      UserData:
        Fn::Base64: !Sub 
          - |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config

            sudo yum -y install nfs-utils awscli aws-cfn-bootstrap

            #Install certbot using python3
            curl -O https://bootstrap.pypa.io/get-pip.py
            python3 get-pip.py
            /usr/local/bin/pip install certbot-dns-cloudflare

            #Get the Cloudflare API Key from the SSM param
            mkdir ~/.secrets/certbot -p
            sudo aws --region=${AWS::Region} ssm get-parameter --name "${CloudflareAPIKEYSSM}" --with-decryption --output text --query Parameter.Value >  ~/.secrets/certbot/cloudflare.ini
            sudo chmod 600 ~/.secrets/certbot/cloudflare.ini

            #Get the certificate
            sudo /usr/local/bin/certbot certonly \
              --dns-cloudflare \
              --dns-cloudflare-credentials ~/.secrets/certbot/cloudflare.ini \
              -d ipfs.otomee.com \
              --email ${Email}  --agree-tos --non-interactive
            
            # Mount the EFS volume and create the directories
            mkdir ~/efs-mount-point 
            sudo mount -t nfs -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${EfsId}.efs.${AWS::Region}.amazonaws.com:/   ~/efs-mount-point
            mkdir ~/efs-mount-point/.ipfs || echo folder ~/efs-mount-point/.ipfs already exists
            mkdir -p ~/efs-mount-point/data/nginx || rm -r ~/efs-mount-point/data/nginx/*
            
            #Copy certificate to EFS volume
            mv -f /etc/letsencrypt/ ~/efs-mount-point/data/nginx/

            #Enable auto-renewal
            SLEEPTIME=$(awk 'BEGIN{srand(); print int(rand()*(3600+1))}'); echo "0 0,12 * * * root sleep $SLEEPTIME && certbot renew -q && mv -f /etc/letsencrypt/live/ipfs.otomee.com/* ~/efs-mount-point/data/nginx/" | sudo tee -a /etc/crontab > /dev/null
            
            #Attach the Elastic IP
            INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            MAXWAIT=3
            ALLOC_ID=${EipAllocationID}
            # Make sure the EIP is free
            echo "Checking if EIP with ALLOC_ID[$ALLOC_ID] is free...."
            ISFREE=$(aws ec2 describe-addresses --allocation-ids $ALLOC_ID --query Addresses[].InstanceId --output text --region ${AWS::Region})
            STARTWAIT=$(date +%s)
            while [ ! -z "$ISFREE" ]; do
                if [ "$(($(date +%s) - $STARTWAIT))" -gt $MAXWAIT ]; then
                    echo "WARNING: We waited 30 seconds, we're forcing it now."
                    ISFREE=""
                else
                    echo "Waiting for EIP with ALLOC_ID[$ALLOC_ID] to become free...."
                    sleep 3
                    ISFREE=$(aws ec2 describe-addresses --allocation-ids $ALLOC_ID --query Addresses[].InstanceId --output text --region ${AWS::Region})
                fi
            done
            # Now we can associate the address
            echo Running: aws ec2 associate-address --instance-id $INSTANCE_ID --allocation-id $ALLOC_ID --allow-reassociation --region ${AWS::Region}
            aws ec2 associate-address --instance-id $INSTANCE_ID --allocation-id $ALLOC_ID --allow-reassociation --region ${AWS::Region}

            #Signal we are ready
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
          - EfsId: !GetAtt EFSFileSystem.FileSystemId
            EipAllocationID: !GetAtt EIP.AllocationId
            Email: !Ref Email
            CloudflareAPIKEYSSM: !Ref CloudflareAPIKEYSSM
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'application-autoscaling:*'
              - 'cloudwatch:DescribeAlarms'
              - 'cloudwatch:PutMetricAlarm'
              - 'ecs:DescribeServices'
              - 'ecs:UpdateService'
            Resource: '*'
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']

  # Role for the EC2 hosts. This allows the ECS agent on the EC2 hosts
  # to communciate with the ECS control plane, as well as download the docker
  # images from ECR to run on your host.
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ecs:CreateCluster'
              - 'ecs:DeregisterContainerInstance'
              - 'ecs:DiscoverPollEndpoint'
              - 'ecs:Poll'
              - 'ecs:RegisterContainerInstance'
              - 'ecs:StartTelemetrySession'
              - 'ecs:Submit*'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'ecr:GetAuthorizationToken'
              - 'ecr:BatchGetImage'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ec2:DescribeAddresses'
              - 'ec2:AllocateAddress'
              - 'ec2:DescribeInstances'
              - 'ec2:AssociateAddress'
              - 'elasticfilesystem:ClientMount'
              - 'elasticfilesystem:ClientRootAccess'
              - 'elasticfilesystem:ClientWrite'
              - 'ssm:GetParameter'
            Resource: '*'

  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'

                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                - 'logs:CreateLogGroup'
              Resource: '*'

# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ClusterName' ] ]
  ECSTaskExecutionRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSTaskExecutionRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSTaskExecutionRole' ] ]
  ECSTaskRole:
    Description: The ARN of the ECS Task role
    Value: !GetAtt 'ECSTaskRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSTaskRole' ] ]
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'VPCId' ] ]
  PublicSubnetOne:
    Description: Public subnet one
    Value: !Ref 'PublicSubnetOne'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetOne' ] ]
  PublicSubnetTwo:
    Description: Public subnet two
    Value: !Ref 'PublicSubnetTwo'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetTwo' ] ]
  EcsHostSecurityGroup:
    Description: A security group used to allow containers to receive traffic
    Value: !Ref 'EcsHostSecurityGroup'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'EcsHostSecurityGroup' ] ]
  EFSFileSystem:
    Description: Thre EFS to persist data between services
    Value: !Ref 'EFSFileSystem'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'EFSFileSystem' ] ]
  EFSSecurityGroup:
    Description: A security group used to allow EFS to receive traffic
    Value: !Ref 'EFSSecurityGroup'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'EFSSecurityGroup' ] ]